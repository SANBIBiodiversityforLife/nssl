<?php

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;

/* 
Note that this file isn't really for importing content as the file name suggests. 
It's just easier not to have two different modules, one for bulk importing and one for performing logic when a species is saved.
*/
function ssp_import_node_presave($node){
	// Whenever a node is saved, the system should check to see if it was on the 2010 list before, and flag it accordingly:
	// In fact, it can't just be the first time, because a user can edit a species name whenever
	// First build up an array of family keys mapped to arrays of species names e.g.: 
	// array('Viperidae' => ['Bitis gabonica', 'Bitis inornanata'], 'Gruidaei' => [some more here etc])
	$species = array();
	if (($handle = fopen("http://nssl.sanbi.org.za/sites/default/files/ssp-both-checking-file.csv", "r")) !== FALSE) {
		while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
			if(array_key_exists($data[2], $species)) {
				array_push($species[$data[2]], $data[0]);
			} else {
				$species[$data[2]] = [$data[0]];
			}
		}
	}
	
	// Check the family first to save time, then the species
	if(array_key_exists($node->field_family->value, $species)) {
		$node->field_sensitive_in_2010->value = in_array($node->title->value, $species[$node->field_family->value]);
	}
	
	// \Drupal::logger('ssp_import')->notice('Node is new: ' . $node->nid->value);
	// Next, sometimes we bulk import species and set them to a preliminary sensitivity
	// In which case we should not override their status. 
	// To check for that is to see if it's the first time a node is saved AND sensitivity value = prelim
	//if($node->is_new && ($node->field_sensitivity->value == 'preliminary_not_sensitive' || $node->field_sensitivity->value == 'preliminary_sensitive')) {
	if(empty($node->nid->value) && ($node->field_sensitivity->value == 'preliminary_not_sensitive' || $node->field_sensitivity->value == 'preliminary_sensitive')) {
		
		return;
	}
	
	
	// Go into the logic of whether it is sensitive or not below
	// Reset the sensitivity each time before we save
	// So first turn sensitivity off
	$node->field_sensitivity->value = '';
	$node->field_is_sensitive->value = 0;
			
	// Species which are not exploited, are managed or have exploitation unknown cannot be sensitive
	// Added good regeneration potential to this list too based on Reuben's feedback
	// Don't do any further checks, return out with sensitivity still set to off
	if($node->field_exploitation_extent->value == 'none' || 
	   $node->field_exploitation_extent->value == 'unknown' ||
	   $node->field_exploitation_extent->value == 'managed' ||
	   $node->field_regeneration_potential->value == 'good' || 
	   $node->field_regeneration_potential->value == 'unknown') {	
		return;
	}
	
	// Deal with all exploitation options EXCEPT when there's a close relative which is also exploited ('uncertain' value)
	if($node->field_exploitation_extent->value != 'uncertain') {	
		
		// Individuals must be permanently removed and killed for us to consider a species to be sensitive
		if($node->field_targeted_demographics->value == 'harmful' || $node->field_targeted_demographics->value == 'harmful_immature') {
			
			// Next check if there is a vulnerable population, if there is it's sensitive
			if($node->field_population_vulnerability->value == 'vulnerable') { 
				$node->field_sensitivity->value = 'rare';
				$node->field_is_sensitive->value = 1;
			}
			
			// Otherwise, if the pop isn't vulnerable but the exploitation is significant then it's sensitive
			// This is in an else because the 'rare' status trumps the 'exploited' status, so to speak
			else if($node->field_exploitation_extent->value == 'significant') {
				
				// Added this in - also check the regeneration potential value
				if($node->field_regeneration_potential->value == 'poor') {
					$node->field_sensitivity->value = 'exploited';
					$node->field_is_sensitive->value = 1;
				}			
			}
		}
	}
	
	// Ok now deal with a close relative with similar life traits being exploited
	// Note this script used to check a related node's sensitivity status, taking that logic out now on request
	else {		
		// Does this (the original) species have a vulnerable population AND poor regeneration potential? If so then it's sensitive
		if($node->field_regeneration_potential->value == 'poor' && $node->field_population_vulnerability->value == 'vulnerable') { 
			$node->field_sensitivity->value = 'relative';
			$node->field_is_sensitive->value = 1;
		}
	}
	
	// As discussed here https://github.com/rukayaj/ssp/issues/43 users with a certain role should trigger a reset back to unpublished status
	$user = \Drupal::currentUser();
	if(!$user->hasPermission('administer nodes')) {
		$node->status = 0;
	}
}